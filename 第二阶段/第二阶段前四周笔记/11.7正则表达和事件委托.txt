事件委托
1）定义：利用了事件冒泡的原理，把本该自己的事件委托给了父级；
2）获取目标元素：event.target || event.srcElement;
3)  有点：减少内存的占用（本该给每一个元素添加一个函数，现在只需给一个即可）；

正则表达式
1）正则表达式：匹配字符串是否按照某种规则，某种规则即正则表达式；
2）声明正则表达式：var reg = new RegExp('');
3)  字变量声明方式： var reg = /i/;

正则表达式方法
1）reg.test();检测字符串是否符合该规则，符合返回true,不符合返回false;
2）reg.exec();捕获，返回满足正则表达式的结果，为一个集合;此方法
具有懒惰型，每次找到一个满足的结果，就返回，后面不会继续查找，加
了全局匹配，就全部都找；


正则表达式的组成部分
1)修饰符：g全局匹配;i不区分大小写；
2)元字符
\转以符
\d 0-9的数字
\w 0-9的数字和字母和下划线
\s 空格符号
. 除了换行符以外的任意字符
[abc]a b c中的任意一个；[0-19]表示0-5或者9
a|b 

3)量词
? 出现0次或者1一次
* 出现0次或者多次
+至少出现1次
{m,n} 至少出现m次，最多出现n次
{m,}至少出现m次
{m}出现m次

4)lastIndex：如果没有修饰符g，lastIndex永远都为0；如果有，每次查
找完毕，lastindex值为找到索引的后一位，如果没有找到结果，lastindex=0;

5)贪婪性；把满足规则的结果全部返回；

键盘事件
1）onkeydown;键盘按下，不区分大小写；可以检测组合键；
检测组合键：e.ctrlKey,按下ctrl键盘e.ctrlKey返回true;不按则
返回false;
2）onkeyup;键盘抬起；
3）onkeypress;只有按了键盘就触发，不区分按下和抬起；
区分大小写；不可以检测组合键；
4）keyCode = e.keyCode || e.which;获取按键的ASCLL编码；















